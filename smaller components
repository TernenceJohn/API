class AuthenticationModule:
    def authenticate(self, username, password):
        # Authentication logic
        pass

class AuthorizationModule:
    def authorize(self, user, resource):
        # Authorization logic
        pass

class DataProcessingModule:
    def process_data(self, data):
        # Data processing logic
        pass

class LoggingModule:
    def log(self, message):
        # Logging logic
        pass

class SystemFacade:
    def __init__(self):
        self.auth_module = AuthenticationModule()
        self.authz_module = AuthorizationModule()
        self.data_proc_module = DataProcessingModule()
        self.logging_module = LoggingModule()

    def perform_operation(self, username, password, resource, data):
        if self.auth_module.authenticate(username, password):
            if self.authz_module.authorize(username, resource):
                processed_data = self.data_proc_module.process_data(data)
                self.logging_module.log("Operation performed successfully")
                return processed_data
            else:
                self.logging_module.log("Unauthorized access attempt")
                raise Exception("Unauthorized access")
        else:
            self.logging_module.log("Authentication failed")
            raise Exception("Authentication failed")

if __name__ == "__main__":
    system = SystemFacade()
    try:
        result = system.perform_operation("user", "password", "resource", "data")
        print("Operation result:", result)
    except Exception as e:
        print("Error:", e)
